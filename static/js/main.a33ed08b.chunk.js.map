{"version":3,"sources":["Components/LocationMarker.js","Components/LocationinfoBox.js","Context/Context.js","Components/Map.js","Components/Header.js","Components/Loader.js","Components/Search.js","App.js","index.js"],"names":["LocationMarker","lat","lng","onClick","id","renderIcon","fireIcon","stormIcon","volcanoIcon","iceIcon","icon","className","LocationinfoBox","info","title","mainContext","React","createContext","useMainContext","useContext","ContextProvider","children","useState","eventData","setEventData","selectedEvent","setSelectedEvent","value","reRenderMarkers","setReReMarkers","Provider","Map","center","mapRef","useRef","zoom","setZoom","bounds","setBounds","locationInfo","setLocationInfo","eventDataIndexNum","Object","keys","map","index","Number","points","event","categories","geometries","coordinates","useSuperCluster","options","radius","maxZoom","clusters","supercluster","useEffect","longitude","latitude","current","panTo","bootstrapURLKeys","key","process","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","onChange","nw","se","onDrag","cluster","geometry","properties","isCluster","pointCount","point_count","clusterId","eventType","changeSize","Math","round","length","addSize","min","style","width","height","expansionZoom","getClusterExpansionZoom","indexOf","eventKey","eventTitle","defaultProps","Header","props","Loader","Search","matchEvent","setMatchEvent","storeSelection","setStoreSelection","searchBox","optionBox","filterEventData","filteredEventData","filter","userSearch","searchQuery","eventMatch","filterdEventData","toLowerCase","push","ref","type","onKeyUp","setTimeout","ev","href","App","loading","setLoading","renderEvent","setRenderEvent","a","fetch","res","json","events","fetchEvents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a33ed08b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Icon} from '@iconify/react';\r\nimport fireIcon from '@iconify/icons-emojione/fire';\r\nimport volcanoIcon from '@iconify/icons-emojione/volcano';\r\nimport stormIcon from '@iconify/icons-emojione/cloud-with-lightning-and-rain';\r\nimport iceIcon from '@iconify/icons-emojione/snowflake';\r\n\r\nfunction LocationMarker({lat, lng, onClick, id}) {\r\n    let renderIcon = null;\r\n    if(id === 8){\r\n        renderIcon = fireIcon;\r\n    }else if(id === 10){\r\n        renderIcon = stormIcon\r\n    }else if(id === 12){\r\n        renderIcon = volcanoIcon\r\n    }else if(id === 15){\r\n        renderIcon = iceIcon\r\n    }\r\n    return (\r\n        <div onClick={onClick}>\r\n            <Icon icon={renderIcon} className=\"location-icon\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationMarker;","import React from 'react';\r\n\r\nfunction LocationinfoBox({info}) {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{info.id}</strong></li>    \r\n                <li>TITLE: <strong>{info.title}</strong></li>    \r\n            </ul>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationinfoBox;","import React, {useContext, useState} from 'react';\r\n\r\nconst mainContext = React.createContext();\r\n\r\nexport function useMainContext(){\r\n    return useContext(mainContext);\r\n}\r\n\r\nexport function ContextProvider({children}){\r\n    //All of the data from NASA EQNET\r\n    const [eventData, setEventData] = useState([]);\r\n    //Used to store the event that the user wants to go to\r\n    const [selectedEvent, setSelectedEvent] = useState(null);\r\n    //Need to re-render markers because user has changed filter option\r\n    const [reRenderMarkers, setReReMarkers] = useState(null);\r\n\r\n    const value = {\r\n        eventData,\r\n        setEventData,\r\n        selectedEvent,\r\n        setSelectedEvent,\r\n        reRenderMarkers,\r\n        setReReMarkers\r\n    }\r\n\r\n    return(\r\n        <mainContext.Provider value={value}>\r\n            {children}\r\n        </mainContext.Provider>\r\n    )\r\n}","import React, {useState, useRef, useEffect} from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport useSuperCluster from 'use-supercluster';\r\nimport LocationMarker from './LocationMarker';\r\nimport LocationInfoBox from './LocationinfoBox';\r\n//Main Context\r\nimport {useMainContext} from '../Context/Context'\r\n\r\nfunction Map({center, eventData}) {\r\n\r\n    const {selectedEvent} = useMainContext();\r\n\r\n    const mapRef = useRef();\r\n    const[zoom, setZoom] = useState(1);\r\n    const [bounds, setBounds] = useState(null);\r\n    //Info Box\r\n    const [locationInfo, setLocationInfo] = useState(null);\r\n\r\n    //Index for reference\r\n    const eventDataIndex = {\r\n        8: \"Wildfires\",\r\n        10: \"Severe Storms\",\r\n        12: \"Volcanoes\",\r\n        15: \"Sea and Lake Ice\"\r\n    }\r\n    //Create an Array of its keys\r\n    let eventDataIndexNum = Object.keys(eventDataIndex);\r\n    eventDataIndexNum = eventDataIndexNum.map(index => Number(index));\r\n\r\n    //Set up the geo-features\r\n    const points = eventData.map(event => ({\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n            \"cluster\": false,\r\n            \"eventKey\": event.id,\r\n            \"eventTitle\": event.title,\r\n            \"eventType\": event.categories[0].id\r\n        },\r\n        \"geometry\": {\"type\": \"Point\", \"coordinates\": [event.geometries[0].coordinates[0], event.geometries[0].coordinates[1]]}\r\n    }));\r\n\r\n    //Get clusters\r\n    const {clusters, supercluster} = useSuperCluster({\r\n        points,\r\n        bounds,\r\n        zoom,\r\n        options: {radius: 75, maxZoom: 20}\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(selectedEvent !== null){\r\n            const [longitude, latitude] = selectedEvent.geometries[0].coordinates;\r\n            mapRef.current.panTo({lat: latitude, lng:longitude});\r\n            mapRef.current.setZoom(10);\r\n        }\r\n    },[selectedEvent])\r\n\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <GoogleMapReact\r\n            bootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_KEY}}\r\n            center={center}\r\n            zoom={zoom}\r\n            yesIWantToUseGoogleMapApiInternals\r\n            onGoogleApiLoaded={({map}) => {\r\n                mapRef.current = map;\r\n            }}\r\n            onChange={({zoom, bounds}) => {\r\n                setZoom(zoom);\r\n                setBounds([\r\n                    bounds.nw.lng,\r\n                    bounds.se.lat,\r\n                    bounds.se.lng,\r\n                    bounds.nw.lat\r\n                ]);\r\n            }}\r\n            onClick={() => {setLocationInfo(null)}}\r\n            onDrag={() => {setLocationInfo(null)}}>\r\n            {clusters.map(cluster => {\r\n                const [longitude, latitude] = cluster.geometry.coordinates;\r\n                const {cluster: isCluster, point_count: pointCount} = cluster.properties;\r\n                //Used for icon type\r\n                const clusterId = cluster.properties.eventType;\r\n                if(isCluster){\r\n                    let changeSize = Math.round(pointCount / points.length * 100);\r\n                    //Can't exceed 40 px\r\n                    let addSize = Math.min(changeSize * 10, 40);\r\n                    return(\r\n                        <section lat={latitude} lng={longitude} key={cluster.id}>\r\n                            <div className=\"cluster-marker\" style={{\r\n                                width: addSize + changeSize + \"px\",\r\n                                height: addSize + changeSize + \"px\" \r\n                            }}\r\n                            onClick={() => {\r\n                                const expansionZoom = Math.min(\r\n                                    supercluster.getClusterExpansionZoom(cluster.id),\r\n                                    20\r\n                                );\r\n                                mapRef.current.setZoom(expansionZoom);\r\n                                mapRef.current.panTo({lat: latitude, lng: longitude})\r\n                            }}\r\n                            >\r\n                                {pointCount}\r\n                            </div>\r\n                        </section>\r\n                    )\r\n                }\r\n\r\n                //Not a cluster. Just a single point\r\n                if(eventDataIndexNum.indexOf(clusterId) !== -1 && cluster.geometry.coordinates.length === 2){\r\n                    return (\r\n                        <LocationMarker\r\n                        lat={latitude}\r\n                        lng={longitude}\r\n                        id={clusterId}\r\n                        key={cluster.properties.eventKey}\r\n                        onClick= {() => {\r\n                            setLocationInfo({id: cluster.properties.eventKey, title: cluster.properties.eventTitle})\r\n                        }}\r\n                        />\r\n                    )\r\n                }\r\n            })}\r\n            </GoogleMapReact>\r\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nMap.defaultProps = {\r\n    center:{\r\n        lat: 29.305561,\r\n        lng: -3.981108\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport {Icon} from '@iconify/react';\r\nimport fireIcon from '@iconify/icons-emojione/fire';\r\n\r\nfunction Header (props) {\r\n    return (\r\n        <div className=\"header-bar\">\r\n            <Icon icon={fireIcon} /> Xtreme Weather Events \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Loader(props) {\r\n    return (\r\n        <div className=\"loader-container\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, {useEffect, useRef, useState} from 'react';\r\n//Global Contexts\r\nimport {useMainContext} from '../Context/Context'\r\n\r\nfunction Search(props) {\r\n\r\n    const {eventData, setSelectedEvent, setReReMarkers} = useMainContext();\r\n    //Matching results\r\n    const [matchEvent, setMatchEvent] = useState(eventData);    \r\n    //Handle Dropdown\r\n    const [storeSelection, setStoreSelection] = useState(\"All\");    \r\n\r\n    const searchBox = useRef();\r\n    const optionBox = useRef();    \r\n\r\n    //Filter eventData\r\n    const filterEventData = eventData => {\r\n        //Spread operator so we don't overwrite Reference data\r\n        let filteredEventData = [...eventData];\r\n        if(storeSelection !== \"All\"){\r\n            filteredEventData = filteredEventData.filter(event => event.categories[0].title === storeSelection);\r\n        }\r\n        return filteredEventData;\r\n    }\r\n\r\n    const userSearch = (searchQuery, eventData) => {\r\n        let eventMatch = [];\r\n        let filterdEventData = filterEventData(eventData);\r\n        if(searchQuery.length > 0 && filterdEventData){\r\n            for(const event in eventData){\r\n                let eventTitle = filterdEventData[event].title.toLowerCase();\r\n                if(eventTitle.indexOf(searchQuery) !== -1){\r\n                    eventMatch.push(filterdEventData[event]);\r\n                }\r\n            }\r\n            //If they have typed in something but it didn't match\r\n            if(eventMatch.length === 0){\r\n                eventMatch = [{title: \"No Results!\", categories: [{title:\"\"}]}]\r\n            }\r\n            setMatchEvent(eventMatch);\r\n        }else{\r\n            setMatchEvent(filterdEventData);\r\n        }\r\n    }\r\n\r\n    //They have changed their filter option. We want the markers to change aswell\r\n    useEffect(() => {\r\n        //First we want to sort out the Markers\r\n        let filterdEventData = filterEventData(eventData);\r\n        setReReMarkers(filterdEventData);\r\n        //Now we want to sort out the search results\r\n        userSearch(searchBox.current.value.toLowerCase(), filterdEventData);\r\n    }, [storeSelection])\r\n\r\n    return (\r\n        <>\r\n            <section className=\"option-container\">\r\n            <p>Type:</p>\r\n            <select ref={optionBox} onChange={() => {setStoreSelection(optionBox.current.value)}}>\r\n                <option value=\"All\">All</option>\r\n                <option value=\"Wildfires\">Wildfires</option>\r\n                <option value=\"Severe Storms\">Severe Storms</option>\r\n                <option value=\"Volcanoes\">Volcanoes</option>\r\n                <option value=\"Sea and Lake Ice\">Sea and Lake Ice</option>\r\n            </select>\r\n            </section>\r\n            <section className=\"search-container\">\r\n                <p>Search:</p>\r\n                <input type=\"text\"\r\n                onKeyUp={() =>{\r\n                    let searchQuery = searchBox.current.value.toLowerCase();\r\n                    //Want to wait for the user to finish typing before sending method\r\n                    setTimeout(() => {\r\n                        if(searchQuery === searchBox.current.value.toLowerCase()){\r\n                            userSearch(searchQuery, eventData);\r\n                        }\r\n                    }, 300)\r\n                }}\r\n                ref={searchBox}/>\r\n            </section>\r\n            <table className=\"search-table\">\r\n                <tr>\r\n                    <th style={{width: \"60%\"}}>Title</th>\r\n                    <th>Type</th>\r\n                    <th>Location</th>\r\n                </tr>\r\n                {matchEvent.map(ev => {\r\n                    return(\r\n                        <tr key={ev.id}>\r\n                            <td>{ev.title}</td>\r\n                            <td>{ev.categories[0].title}</td>\r\n                            {ev.categories[0].title ? <td><a \r\n                            href=\"#\"\r\n                            onClick={() => {setSelectedEvent(ev)}}>Click Here</a></td> : <td></td>}\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </table>   \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Search;","import Map from './Components/Map';\nimport Header from './Components/Header';\nimport React, {useState, useEffect} from 'react';\nimport Loader from './Components/Loader';\nimport Search from './Components/Search';\n//Main Context\nimport {useMainContext} from './Context/Context';\n\n\nfunction App() {\n  const {setEventData, reRenderMarkers} = useMainContext();\n  const [loading, setLoading] = useState(false);\n  //Event to render\n  const [renderEvent, setRenderEvent] = useState([]);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch(\"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\");\n      //Extract the Array contained in the 'events' field\n      const {events} = await res.json();\n      //Event data is globally accessible but 'renderEvent' is just to render our thr MAP with the markers\n      setEventData(events);\n      setRenderEvent(events);\n      setLoading(false);\n    }\n\n    fetchEvents();\n  },[])\n\n  useEffect(() => {\n    if(reRenderMarkers !== null){\n      setRenderEvent(reRenderMarkers);\n    }\n  },[reRenderMarkers])\n\n\n  return (\n    <div >\n    <Header />\n     {!loading ? <Map eventData={renderEvent} /> : <Loader />}\n     {!loading && <Search />} \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//Main Context\nimport {ContextProvider} from './Context/Context'\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <ContextProvider>\n  <App />\n  </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}